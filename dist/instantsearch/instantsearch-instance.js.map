{"version":3,"sources":["../../src/instantsearch/instantsearch-instance.ts"],"names":[],"mappings":"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","file":"instantsearch-instance.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from \"@angular/core\";\nimport { isPlatformBrowser } from \"@angular/common\";\n\nimport instantsearch from \"instantsearch.js/es\";\n\nimport { Widget } from \"../base-widget\";\nimport { VERSION } from \"../version\";\n\nexport type InstantSearchConfig = {\n  appId: string;\n  apiKey: string;\n  indexName: string;\n\n  numberLocale?: string;\n  searchFunction?: () => void;\n  createAlgoliaClient?: (\n    algoliasearch: Function,\n    appId: string,\n    apiKey: string\n  ) => object;\n  searchParameters?: object | void;\n  urlSync?:\n    | boolean\n    | {\n        mapping?: object;\n        threshold?: number;\n        trackedParameters?: string[];\n        useHash?: boolean;\n        getHistoryState?: () => object;\n      };\n};\n\nexport class InstantSearchInstance {\n  public start: () => void;\n\n  public addWidget: (widget: Widget) => void;\n  public addWidgets: (widgets: Widget[]) => void;\n\n  public removeWidget: (widget: Widget) => void;\n  public removeWidgets: (widgets: Widget[]) => void;\n\n  // EventEmmiter\n  public on: (eventName: string, callback: Function) => void;\n  public removeListener: (eventName: string, callback: Function) => void;\n\n  public helper: {\n    lastResults: Object;\n    state: Object;\n  };\n}\n\n\nexport class NgAisInstance {\n  private instance?: InstantSearchInstance;\n  private didSSR: boolean;\n\n  constructor( private platformId: Object) {}\n\n  public init(config: InstantSearchConfig) {\n    // add default searchParameters with highlighting config\n    if (!config.searchParameters) config.searchParameters = {};\n    Object.assign(config.searchParameters, {\n      highlightPreTag: \"__ais-highlight__\",\n      highlightPostTag: \"__/ais-highlight__\"\n    });\n\n    // remove URLSync widget if on SSR\n    if (!isPlatformBrowser(this.platformId)) {\n      config.urlSync = false;\n    }\n\n    // custom algolia client agent\n    if (!config.createAlgoliaClient) {\n      config.createAlgoliaClient = (algoliasearch, appId, apiKey) => {\n        const client = algoliasearch(appId, apiKey);\n        client.addAlgoliaAgent(`angular-instantsearch ${VERSION}`);\n        return client;\n      };\n    }\n\n    this.instance = instantsearch(config);\n  }\n\n  public start() {\n    this.instance.start();\n  }\n\n  public addWidget(widget: Widget) {\n    this.instance.addWidget(widget);\n  }\n\n  public addWidgets(widgets: Widget[]) {\n    this.instance.addWidgets(widgets);\n  }\n\n  public removeWidget(widget: Widget) {\n    this.instance.removeWidget(widget);\n  }\n\n  public removeWidgets(widgets: Widget[]) {\n    this.instance.removeWidgets(widgets);\n  }\n\n  public on(eventName: string, callback: Function) {\n    this.instance.on(eventName, callback);\n  }\n\n  public off(eventName: string, callback: Function) {\n    this.instance.removeListener(eventName, callback);\n  }\n\n  getResults() {\n    return this.instance.helper.lastResults;\n  }\n\n  getState() {\n    return this.instance.helper.state;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}