{"version":3,"sources":["../../src/toggle/toggle.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAO,MAAA,EAAQ,WAAA,EAAY,MAAO,eAAA,CAAgB;AACtE,OAAO,EAAE,aAAA,EAAc,MAAO,gCAAA,CAAiC;AAC/D,OAAO,EAAE,IAAA,EAAK,MAAO,WAAA,CAAY;AAEjC,OAAO,EAAE,UAAA,EAAW,MAAO,gBAAA,CAAiB;AAC5C,OAAO,EAAE,aAAA,EAAc,MAAO,yCAAA,CAA0C;AAaxE;IAAiC,+BAAU;IAazC,qBACU,UAAkB,EAC1B,cAA6B;QAF/B,YAIE,kBAAM,cAAc,EAAE,QAAQ,CAAC,SAChC;QAJS,gBAAU,GAAV,UAAU,CAAQ;QATrB,YAAM,GAAoC,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;QAEvE,WAAK,GAAgB;YAC1B,SAAS,EAAE,IAAI;YACf,MAAM,EAAE,IAAI;YACZ,KAAK,EAAE,EAAE;SACV,CAAC;;IAOF,CAAC;IAEM,8BAAQ,GAAf;QACE,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE;YAC/B,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC,CAAC;QACH,iBAAM,QAAQ,WAAE,CAAC;IACnB,CAAC;IAEM,iCAAW,GAAlB,UAAmB,KAAiB;QAClC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IACI,sBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,k3BA2BT;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,0BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAG,EAAC;QACvE,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAH6F,CAG7F,CAAC;IACK,0BAAc,GAA2C;QAChE,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACnC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC3B,CAAC;IACF,kBAAC;CA7ED,AA6EC,CA7EgC,UAAU,GA6E1C;SA7EY,WAAW","file":"toggle.js","sourceRoot":"","sourcesContent":["import { Component, Input, Inject, PLATFORM_ID } from \"@angular/core\";\nimport { connectToggle } from \"instantsearch.js/es/connectors\";\nimport { noop } from \"lodash-es\";\n\nimport { BaseWidget } from \"../base-widget\";\nimport { NgAisInstance } from \"../instantsearch/instantsearch-instance\";\n\nexport type ToggleState = {\n  createURL: Function;\n  refine: Function;\n  value: {\n    name?: string;\n    count?: number;\n    isRefined?: boolean;\n  };\n};\n\n\nexport class NgAisToggle extends BaseWidget {\n  // connector options\n   public attributeName: string;\n   public label: string;\n  \n  public values: { on?: boolean; off?: boolean } = { on: true, off: undefined };\n\n  public state: ToggleState = {\n    createURL: noop,\n    refine: noop,\n    value: {}\n  };\n\n  constructor(\n     public platformId: Object,\n    searchInstance: NgAisInstance\n  ) {\n    super(searchInstance, \"Toggle\");\n  }\n\n  public ngOnInit() {\n    this.createWidget(connectToggle, {\n      attributeName: this.attributeName,\n      label: this.label,\n      values: this.values\n    });\n    super.ngOnInit();\n  }\n\n  public handleClick(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.state.refine(this.state.value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: \"ng-ais-toggle\",\n  template: `\n    <div [class]=\"cx()\">\n      <ng-ais-header [header]=\"header\" [className]=\"cx('header')\"></ng-ais-header>\n\n      <div [class]=\"cx('body')\">\n        <ul [class]=\"cx('list')\">\n          <li\n            [class]=\"cx('item')\"\n            (click)=\"handleClick($event)\">\n            <label [class]=\"cx('label')\">\n              <input\n                [class]=\"cx('checkbox')\"\n                type=\"checkbox\"\n                value=\"{{state.value.name}}\"\n                [checked]=\"state.value.isRefined\"\n              />\n              {{label || state.value.name}}\n              <span [class]=\"cx('count')\">\n                {{state.value.count}}\n              </span>\n            </label>\n          </li>\n        </ul>\n      </div>\n\n      <ng-ais-footer [footer]=\"footer\" [className]=\"cx('footer')\"></ng-ais-footer>\n    </div>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: NgAisInstance, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'attributeName': [{ type: Input },],\n'label': [{ type: Input },],\n'values': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}